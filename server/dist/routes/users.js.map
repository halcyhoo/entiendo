{"version":3,"sources":["../../src/routes/users.js"],"names":["connect","mongodb","db","connection","on","router","Router","get","requiresLoggedIn","req","res","next","findById","sessionStore","userId","select","_id","email","firstName","lastName","level","exec","error","user","err","Error","message","nextLevel","getScore","json","totalAnswers","scores","successAnswers","levelPoints","totalPoints","post","params","status","body","regex","test","count","$ne","findOneAndUpdate","success","pointsRequired","position","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["import express from \"express\";\nimport mongoose from \"mongoose\";\nimport Settings from \"../settings\";\nimport Functions from \"../functions\";\nimport Middleware from \"../middleware\";\nimport User from \"../models/user\";\n\nmongoose.connect(Settings.mongodb);\n\nconst db = mongoose.connection;\ndb.on(\"error\", ()=>{\n  //console.error(\"DB Connection Error\");\n});\n\n\n\n\nvar router = express.Router();\n\n/* GET all available users */\nrouter.get(\"/\", Middleware.requiresLoggedIn,function(req, res, next) {\n  User.findById(req.sessionStore.userId)\n  .select({\n    _id: 1,\n    email: 1,\n    firstName: 1,\n    lastName: 1,\n    level: 1,\n  })\n  .exec((error, user) => {\n    if(error){\n      const err = new Error(\"User retrieval error\");\n      err.message = \"User retrieval error\";\n      next(err);\n    }else{\n      user.nextLevel(user, nextLevel=>{\n        user.getScore(user, scores=>{\n          res.json({\n            _id: user._id,\n            email: user.email,\n            lastName: user.lastName,\n            firstName: user.firstName,\n            level: user.level,\n            totalAnswers: scores.totalAnswers,\n            successAnswers: scores.successAnswers,\n            levelPoints: scores.levelPoints,\n            totalPoints: scores.totalPoints,\n            nextLevel: nextLevel\n          });\n        });\n      });\n\n    }\n  });\n\n});\n\n\n/* POST update user account */\nrouter.post(\"/:userId\", Middleware.requiresLoggedIn,function(req, res, next) {\n  if(req.params.userId !== req.sessionStore.userId){\n    let err = new Error(\"Permission Denied\");\n    err.message = \"Permission Denied\";\n    err.status = 401;\n    next(err);\n  }else{\n    if(typeof req.body.firstName !== \"string\" || typeof req.body.lastName !== \"string\" || typeof req.body.email !== \"string\"){\n      let err = new Error(\"Invalid Data - Strings required\");\n      err.message = \"Invalid Data - Strings required\";\n      err.status = 400;\n      next(err);\n    }else{\n      if(!Functions.regex.email.test(req.body.email)){\n        let err = new Error(\"Please enter a valid email address\");\n        err.message = \"Please enter a valid email address\";\n        err.status = 400;\n        next(err);\n      }else{\n\n        User.count({_id: {$ne: req.params.userId}, email: req.body.email}, (error, count)=>{\n\n          if(error){\n            next(error);\n          }else{\n            if(count === 0){\n\n              User.findOneAndUpdate({_id: req.params.userId}, {\n                firstName: req.body.firstName,\n                lastName: req.body.lastName,\n                email: req.body.email,\n              }, (error, user)=>{\n                if(error){\n                  next(error);\n                }else{\n                  res.json({\n                    success: true,\n                    message: \"Account Updated\",\n                    user: {\n                      firstName: user.firstName,\n                      lastName: user.lastName,\n                      email: user.email,\n                    }\n                  });\n                }\n              });\n\n            }else{\n              let err = new Error(\"That email address is already in use\");\n              err.message = \"That email address is already in use\";\n              err.status = 400;\n              next(err);\n            }\n\n          }\n\n\n        });\n      }\n    }\n  }\n\n});\n\n\nrouter.post(\"/:userId/levelup\", Middleware.requiresLoggedIn,function(req, res, next) {\n  if(req.params.userId !== req.sessionStore.userId){\n    let err = new Error(\"Permission Denied\");\n    err.message = \"Permission Denied\";\n    err.status = 401;\n    next(err);\n  }else{\n    User.findById(req.sessionStore.userId)\n    .select({\n      _id: 1,\n      email: 1,\n      firstName: 1,\n      lastName: 1,\n      level: 1,\n    })\n    .exec((error, user) => {\n      if(error){\n        next(error);\n      }else{\n        user.nextLevel(user, nextLevel=>{\n          user.getScore(user, scores=>{\n            if(scores.levelPoints >= nextLevel.pointsRequired){\n              User.findOneAndUpdate({_id: user._id}, {level: nextLevel.position}, (error)=>{\n                if(error){\n                  next(error);\n                }else{\n                  res.json({success: true});\n                }\n              });\n            }else{\n              let err = new Error(\"Not enough points to level up\");\n              err.message = \"Not enough points to level up\";\n              err.status = 403;\n              next(err);\n            }\n          });\n        });\n      }\n    });\n  }\n});\n\nmodule.exports = router;\n"]}