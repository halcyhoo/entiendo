{"version":3,"sources":["../../src/routes/index.js"],"names":["connect","mongodb","db","connection","on","router","Router","post","req","res","next","body","email","password","authenticate","error","user","err","Error","status","message","session","userId","_id","json","sessionId","sessionID","UserData","regex","test","count","length","create","get","requiresLoggedIn","sessionStore","send","success","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import express from \"express\";\nimport mongoose from \"mongoose\";\nimport Settings from \"../settings\";\nimport User from \"../models/user\";\nimport Middleware from \"../middleware\";\nimport Functions from \"../functions\";\n\nmongoose.connect(Settings.mongodb);\n\nconst db = mongoose.connection;\ndb.on(\"error\", ()=>{\n  //console.error(\"DB Connection Error\");\n});\n\nvar router = express.Router();\n\n// POST /login\nrouter.post(\"/login\", function(req, res, next) {\n  if(req.body.email && req.body.password){\n    User.authenticate(req.body.email, req.body.password, function(error, user){\n      if(error || !user){\n        var err = new Error(\"Wrong email or password\");\n        err.status = 401;\n        err.message = \"Wrong email or password\";\n        next(error);\n      }else{\n        req.session.userId = user._id;\n        return res.json({sessionId: req.sessionID});\n      }\n    });\n  }else{\n    var err = new Error(\"Email and password are required\");\n    err.message = \"Email and password are required\";\n    err.status = 401;\n    return next(err);\n  }\n});\n\n// POST /register\nrouter.post(\"/register\", function(req, res, next) {\n  if(req.body.email && req.body.password){\n    var UserData = {\n      email: req.body.email,\n      password: req.body.password,\n    };\n\n    if(!Functions.regex.email.test(req.body.email)){\n      let err = new Error(\"Please enter a valid email address\");\n      err.message = \"Please enter a valid email address\";\n      err.status = 400;\n      next(err);\n    }else{\n\n      User.count({email: req.body.email}, (error, count)=>{\n\n        if(error){\n          next(error);\n        }else{\n\n          if(count >= 1){\n            let err = new Error(\"That email address is already in use\");\n            err.message = \"That email address is already in use\";\n            err.status = 400;\n            next(err);\n          }else{\n\n\n            if(req.body.password.length <= 3){\n              let err = new Error(\"Please enter a longer password\");\n              err.message = \"Please enter a longer password\";\n              err.status = 400;\n              next(err);\n            }else{\n              User.create(UserData, (error, user)=>{\n                if(error){\n                  next(error);\n                }else{\n                  req.session.userId = user._id;\n                  res.json({sessionId: req.sessionID});\n                }\n              });\n            }\n\n          }\n\n        }\n\n      });\n    }\n  }else {\n    let err = new Error(\"All Fields Required\");\n    err.status = 400;\n    err.message = \"All Fields Required\";\n    return next(err);\n  }\n});\n\n\n// GET /session - Check if session is valid\nrouter.get(\"/session\", Middleware.requiresLoggedIn, function(req, res, next) {\n  User.count({_id: req.sessionStore.userId}, (error, count)=>{\n    if(error){\n      next(error);\n    }else{\n      if(count == 1){\n        res.send({\n          success: true,\n          message: \"Session Valid\"\n        });\n      }else{\n        let err = new Error(\"Invalid Session\");\n        err.message = \"Invalid Session\";\n        err.status = 401;\n        next(err);\n\n      }\n    }\n  });\n});\n\nmodule.exports = router;\n"]}