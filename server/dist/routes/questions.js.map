{"version":3,"sources":["../../src/routes/questions.js"],"names":["connect","mongodb","db","connection","on","router","Router","get","requiresLoggedIn","req","res","next","find","_id","sessionStore","userId","error","user","err","Error","message","status","findOneRandom","difficulty","level","question","formatedQuestion","id","es","Math","floor","random","length","json","post","findOne","params","questionId","match","a","en","body","answer","toLowerCase","answerData","success","points","create","questionSuccess","questionData","module","exports"],"mappings":"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","file":"questions.js","sourcesContent":["import express from \"express\";\nimport mongoose from \"mongoose\";\nimport Settings from \"../settings\";\nimport Middleware from \"../middleware\";\nimport Question from \"../models/question\";\nimport User from \"../models/user\";\nimport Answer from \"../models/answer\";\n\nmongoose.connect(Settings.mongodb);\n\nconst db = mongoose.connection;\ndb.on(\"error\", ()=>{\n  //console.error(\"DB Connection Error\");\n});\n\n\n\n\nvar router = express.Router();\n\n/* GET random question in level */\nrouter.get(\"/\", Middleware.requiresLoggedIn,(req, res, next) => {\n  User.find({_id: req.sessionStore.userId}, (error, user)=>{\n    if(error){\n      next(error);\n    }else{\n      if(!user[0]){\n        let err = new Error(\"No user found\");\n        err.message = \"No user found\";\n        err.status = 400;\n        next(err);\n      }else{\n\n\n        Question.findOneRandom({difficulty: user[0].level}, {}, {},  (error, question)=>{\n          if(error){\n            next(error);\n          }else{\n            let formatedQuestion = {\n              difficulty: question.difficulty,\n              id: question._id,\n              es: question.es[Math.floor(Math.random()*question.es.length)],\n            };\n            res.json(formatedQuestion);\n          }\n        });\n      }\n\n    }\n  });\n});\n\nrouter.post(\"/:questionId\", Middleware.requiresLoggedIn,(req, res, next) => {\n  User.find({_id: req.sessionStore.userId}, (error, user)=>{\n    if(error){\n      next(error);\n    }else{\n      if(!user[0]){\n        let err = new Error(\"No user found\");\n        err.message = \"No user found\";\n        err.status = 400;\n        next(err);\n      }else{\n\n        Question.findOne({_id: req.params.questionId}, \"en difficulty es\",  (error, question)=>{\n          if(error){\n            next(error);\n          }else{\n            let match = false;\n            for(let a = 0; a < question.en.length; a ++){\n\n              if(req.body.answer.toLowerCase() == question.en[a].toLowerCase()){\n                match = true;\n                break;\n              }\n            }\n            var answerData;\n\n            if(match){\n              answerData = {\n                userId: user[0]._id,\n                questionId: question._id,\n                success: true,\n                level: question.difficulty,\n                points: question.difficulty,\n              };\n            }else{\n              answerData = {\n                userId: user[0]._id,\n                questionId: question._id,\n                success: false,\n                level: question.difficulty,\n                points: question.difficulty,\n              };\n            }\n\n            Answer.create(answerData, (error)=>{\n              if(error){\n                next(error);\n              }else{\n                res.json({\n                  questionSuccess: answerData.success,\n                  questionData: {\n                    en: question.en,\n                    es: question.es,\n                    difficulty: question.difficulty,\n                  }\n                });\n              }\n            });\n\n\n\n          }\n        });\n      }\n\n    }\n  });\n});\n\nmodule.exports = router;\n"]}